/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.hx.rpc.gen;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-05-03")
public class Header implements org.apache.thrift.TBase<Header, Header._Fields>, java.io.Serializable, Cloneable, Comparable<Header> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Header");

  private static final org.apache.thrift.protocol.TField PROTOCOL_FIELD_DESC = new org.apache.thrift.protocol.TField("protocol", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField TID_FIELD_DESC = new org.apache.thrift.protocol.TField("tid", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField MSG_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("msgType", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField INVOKE_MODE_FIELD_DESC = new org.apache.thrift.protocol.TField("invokeMode", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField CONNECTION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("connectionId", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField MSG_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("msgName", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField RPC_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("rpcId", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField RELAY_STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("relayState", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField URL_FIELD_DESC = new org.apache.thrift.protocol.TField("url", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField COME_FROM_FIELD_DESC = new org.apache.thrift.protocol.TField("comeFrom", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField TO_FIELD_DESC = new org.apache.thrift.protocol.TField("to", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField RESULT_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("resultCode", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField AP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("apId", org.apache.thrift.protocol.TType.STRING, (short)13);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new HeaderStandardSchemeFactory());
    schemes.put(TupleScheme.class, new HeaderTupleSchemeFactory());
  }

  public String protocol; // required
  public String tid; // required
  public int msgType; // required
  public int invokeMode; // optional
  public String connectionId; // optional
  public String msgName; // optional
  public String rpcId; // optional
  public String relayState; // optional
  public String url; // optional
  public String comeFrom; // optional
  public String to; // optional
  public int resultCode; // optional
  public String apId; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PROTOCOL((short)1, "protocol"),
    TID((short)2, "tid"),
    MSG_TYPE((short)3, "msgType"),
    INVOKE_MODE((short)4, "invokeMode"),
    CONNECTION_ID((short)5, "connectionId"),
    MSG_NAME((short)6, "msgName"),
    RPC_ID((short)7, "rpcId"),
    RELAY_STATE((short)8, "relayState"),
    URL((short)9, "url"),
    COME_FROM((short)10, "comeFrom"),
    TO((short)11, "to"),
    RESULT_CODE((short)12, "resultCode"),
    AP_ID((short)13, "apId");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PROTOCOL
          return PROTOCOL;
        case 2: // TID
          return TID;
        case 3: // MSG_TYPE
          return MSG_TYPE;
        case 4: // INVOKE_MODE
          return INVOKE_MODE;
        case 5: // CONNECTION_ID
          return CONNECTION_ID;
        case 6: // MSG_NAME
          return MSG_NAME;
        case 7: // RPC_ID
          return RPC_ID;
        case 8: // RELAY_STATE
          return RELAY_STATE;
        case 9: // URL
          return URL;
        case 10: // COME_FROM
          return COME_FROM;
        case 11: // TO
          return TO;
        case 12: // RESULT_CODE
          return RESULT_CODE;
        case 13: // AP_ID
          return AP_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __MSGTYPE_ISSET_ID = 0;
  private static final int __INVOKEMODE_ISSET_ID = 1;
  private static final int __RESULTCODE_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.INVOKE_MODE,_Fields.CONNECTION_ID,_Fields.MSG_NAME,_Fields.RPC_ID,_Fields.RELAY_STATE,_Fields.URL,_Fields.COME_FROM,_Fields.TO,_Fields.RESULT_CODE,_Fields.AP_ID};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PROTOCOL, new org.apache.thrift.meta_data.FieldMetaData("protocol", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TID, new org.apache.thrift.meta_data.FieldMetaData("tid", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MSG_TYPE, new org.apache.thrift.meta_data.FieldMetaData("msgType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.INVOKE_MODE, new org.apache.thrift.meta_data.FieldMetaData("invokeMode", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CONNECTION_ID, new org.apache.thrift.meta_data.FieldMetaData("connectionId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MSG_NAME, new org.apache.thrift.meta_data.FieldMetaData("msgName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RPC_ID, new org.apache.thrift.meta_data.FieldMetaData("rpcId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RELAY_STATE, new org.apache.thrift.meta_data.FieldMetaData("relayState", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.URL, new org.apache.thrift.meta_data.FieldMetaData("url", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COME_FROM, new org.apache.thrift.meta_data.FieldMetaData("comeFrom", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TO, new org.apache.thrift.meta_data.FieldMetaData("to", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RESULT_CODE, new org.apache.thrift.meta_data.FieldMetaData("resultCode", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.AP_ID, new org.apache.thrift.meta_data.FieldMetaData("apId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Header.class, metaDataMap);
  }

  public Header() {
  }

  public Header(
    String protocol,
    String tid,
    int msgType)
  {
    this();
    this.protocol = protocol;
    this.tid = tid;
    this.msgType = msgType;
    setMsgTypeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Header(Header other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetProtocol()) {
      this.protocol = other.protocol;
    }
    if (other.isSetTid()) {
      this.tid = other.tid;
    }
    this.msgType = other.msgType;
    this.invokeMode = other.invokeMode;
    if (other.isSetConnectionId()) {
      this.connectionId = other.connectionId;
    }
    if (other.isSetMsgName()) {
      this.msgName = other.msgName;
    }
    if (other.isSetRpcId()) {
      this.rpcId = other.rpcId;
    }
    if (other.isSetRelayState()) {
      this.relayState = other.relayState;
    }
    if (other.isSetUrl()) {
      this.url = other.url;
    }
    if (other.isSetComeFrom()) {
      this.comeFrom = other.comeFrom;
    }
    if (other.isSetTo()) {
      this.to = other.to;
    }
    this.resultCode = other.resultCode;
    if (other.isSetApId()) {
      this.apId = other.apId;
    }
  }

  public Header deepCopy() {
    return new Header(this);
  }

  @Override
  public void clear() {
    this.protocol = null;
    this.tid = null;
    setMsgTypeIsSet(false);
    this.msgType = 0;
    setInvokeModeIsSet(false);
    this.invokeMode = 0;
    this.connectionId = null;
    this.msgName = null;
    this.rpcId = null;
    this.relayState = null;
    this.url = null;
    this.comeFrom = null;
    this.to = null;
    setResultCodeIsSet(false);
    this.resultCode = 0;
    this.apId = null;
  }

  public String getProtocol() {
    return this.protocol;
  }

  public Header setProtocol(String protocol) {
    this.protocol = protocol;
    return this;
  }

  public void unsetProtocol() {
    this.protocol = null;
  }

  /** Returns true if field protocol is set (has been assigned a value) and false otherwise */
  public boolean isSetProtocol() {
    return this.protocol != null;
  }

  public void setProtocolIsSet(boolean value) {
    if (!value) {
      this.protocol = null;
    }
  }

  public String getTid() {
    return this.tid;
  }

  public Header setTid(String tid) {
    this.tid = tid;
    return this;
  }

  public void unsetTid() {
    this.tid = null;
  }

  /** Returns true if field tid is set (has been assigned a value) and false otherwise */
  public boolean isSetTid() {
    return this.tid != null;
  }

  public void setTidIsSet(boolean value) {
    if (!value) {
      this.tid = null;
    }
  }

  public int getMsgType() {
    return this.msgType;
  }

  public Header setMsgType(int msgType) {
    this.msgType = msgType;
    setMsgTypeIsSet(true);
    return this;
  }

  public void unsetMsgType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MSGTYPE_ISSET_ID);
  }

  /** Returns true if field msgType is set (has been assigned a value) and false otherwise */
  public boolean isSetMsgType() {
    return EncodingUtils.testBit(__isset_bitfield, __MSGTYPE_ISSET_ID);
  }

  public void setMsgTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MSGTYPE_ISSET_ID, value);
  }

  public int getInvokeMode() {
    return this.invokeMode;
  }

  public Header setInvokeMode(int invokeMode) {
    this.invokeMode = invokeMode;
    setInvokeModeIsSet(true);
    return this;
  }

  public void unsetInvokeMode() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INVOKEMODE_ISSET_ID);
  }

  /** Returns true if field invokeMode is set (has been assigned a value) and false otherwise */
  public boolean isSetInvokeMode() {
    return EncodingUtils.testBit(__isset_bitfield, __INVOKEMODE_ISSET_ID);
  }

  public void setInvokeModeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INVOKEMODE_ISSET_ID, value);
  }

  public String getConnectionId() {
    return this.connectionId;
  }

  public Header setConnectionId(String connectionId) {
    this.connectionId = connectionId;
    return this;
  }

  public void unsetConnectionId() {
    this.connectionId = null;
  }

  /** Returns true if field connectionId is set (has been assigned a value) and false otherwise */
  public boolean isSetConnectionId() {
    return this.connectionId != null;
  }

  public void setConnectionIdIsSet(boolean value) {
    if (!value) {
      this.connectionId = null;
    }
  }

  public String getMsgName() {
    return this.msgName;
  }

  public Header setMsgName(String msgName) {
    this.msgName = msgName;
    return this;
  }

  public void unsetMsgName() {
    this.msgName = null;
  }

  /** Returns true if field msgName is set (has been assigned a value) and false otherwise */
  public boolean isSetMsgName() {
    return this.msgName != null;
  }

  public void setMsgNameIsSet(boolean value) {
    if (!value) {
      this.msgName = null;
    }
  }

  public String getRpcId() {
    return this.rpcId;
  }

  public Header setRpcId(String rpcId) {
    this.rpcId = rpcId;
    return this;
  }

  public void unsetRpcId() {
    this.rpcId = null;
  }

  /** Returns true if field rpcId is set (has been assigned a value) and false otherwise */
  public boolean isSetRpcId() {
    return this.rpcId != null;
  }

  public void setRpcIdIsSet(boolean value) {
    if (!value) {
      this.rpcId = null;
    }
  }

  public String getRelayState() {
    return this.relayState;
  }

  public Header setRelayState(String relayState) {
    this.relayState = relayState;
    return this;
  }

  public void unsetRelayState() {
    this.relayState = null;
  }

  /** Returns true if field relayState is set (has been assigned a value) and false otherwise */
  public boolean isSetRelayState() {
    return this.relayState != null;
  }

  public void setRelayStateIsSet(boolean value) {
    if (!value) {
      this.relayState = null;
    }
  }

  public String getUrl() {
    return this.url;
  }

  public Header setUrl(String url) {
    this.url = url;
    return this;
  }

  public void unsetUrl() {
    this.url = null;
  }

  /** Returns true if field url is set (has been assigned a value) and false otherwise */
  public boolean isSetUrl() {
    return this.url != null;
  }

  public void setUrlIsSet(boolean value) {
    if (!value) {
      this.url = null;
    }
  }

  public String getComeFrom() {
    return this.comeFrom;
  }

  public Header setComeFrom(String comeFrom) {
    this.comeFrom = comeFrom;
    return this;
  }

  public void unsetComeFrom() {
    this.comeFrom = null;
  }

  /** Returns true if field comeFrom is set (has been assigned a value) and false otherwise */
  public boolean isSetComeFrom() {
    return this.comeFrom != null;
  }

  public void setComeFromIsSet(boolean value) {
    if (!value) {
      this.comeFrom = null;
    }
  }

  public String getTo() {
    return this.to;
  }

  public Header setTo(String to) {
    this.to = to;
    return this;
  }

  public void unsetTo() {
    this.to = null;
  }

  /** Returns true if field to is set (has been assigned a value) and false otherwise */
  public boolean isSetTo() {
    return this.to != null;
  }

  public void setToIsSet(boolean value) {
    if (!value) {
      this.to = null;
    }
  }

  public int getResultCode() {
    return this.resultCode;
  }

  public Header setResultCode(int resultCode) {
    this.resultCode = resultCode;
    setResultCodeIsSet(true);
    return this;
  }

  public void unsetResultCode() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RESULTCODE_ISSET_ID);
  }

  /** Returns true if field resultCode is set (has been assigned a value) and false otherwise */
  public boolean isSetResultCode() {
    return EncodingUtils.testBit(__isset_bitfield, __RESULTCODE_ISSET_ID);
  }

  public void setResultCodeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RESULTCODE_ISSET_ID, value);
  }

  public String getApId() {
    return this.apId;
  }

  public Header setApId(String apId) {
    this.apId = apId;
    return this;
  }

  public void unsetApId() {
    this.apId = null;
  }

  /** Returns true if field apId is set (has been assigned a value) and false otherwise */
  public boolean isSetApId() {
    return this.apId != null;
  }

  public void setApIdIsSet(boolean value) {
    if (!value) {
      this.apId = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PROTOCOL:
      if (value == null) {
        unsetProtocol();
      } else {
        setProtocol((String)value);
      }
      break;

    case TID:
      if (value == null) {
        unsetTid();
      } else {
        setTid((String)value);
      }
      break;

    case MSG_TYPE:
      if (value == null) {
        unsetMsgType();
      } else {
        setMsgType((Integer)value);
      }
      break;

    case INVOKE_MODE:
      if (value == null) {
        unsetInvokeMode();
      } else {
        setInvokeMode((Integer)value);
      }
      break;

    case CONNECTION_ID:
      if (value == null) {
        unsetConnectionId();
      } else {
        setConnectionId((String)value);
      }
      break;

    case MSG_NAME:
      if (value == null) {
        unsetMsgName();
      } else {
        setMsgName((String)value);
      }
      break;

    case RPC_ID:
      if (value == null) {
        unsetRpcId();
      } else {
        setRpcId((String)value);
      }
      break;

    case RELAY_STATE:
      if (value == null) {
        unsetRelayState();
      } else {
        setRelayState((String)value);
      }
      break;

    case URL:
      if (value == null) {
        unsetUrl();
      } else {
        setUrl((String)value);
      }
      break;

    case COME_FROM:
      if (value == null) {
        unsetComeFrom();
      } else {
        setComeFrom((String)value);
      }
      break;

    case TO:
      if (value == null) {
        unsetTo();
      } else {
        setTo((String)value);
      }
      break;

    case RESULT_CODE:
      if (value == null) {
        unsetResultCode();
      } else {
        setResultCode((Integer)value);
      }
      break;

    case AP_ID:
      if (value == null) {
        unsetApId();
      } else {
        setApId((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PROTOCOL:
      return getProtocol();

    case TID:
      return getTid();

    case MSG_TYPE:
      return getMsgType();

    case INVOKE_MODE:
      return getInvokeMode();

    case CONNECTION_ID:
      return getConnectionId();

    case MSG_NAME:
      return getMsgName();

    case RPC_ID:
      return getRpcId();

    case RELAY_STATE:
      return getRelayState();

    case URL:
      return getUrl();

    case COME_FROM:
      return getComeFrom();

    case TO:
      return getTo();

    case RESULT_CODE:
      return getResultCode();

    case AP_ID:
      return getApId();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PROTOCOL:
      return isSetProtocol();
    case TID:
      return isSetTid();
    case MSG_TYPE:
      return isSetMsgType();
    case INVOKE_MODE:
      return isSetInvokeMode();
    case CONNECTION_ID:
      return isSetConnectionId();
    case MSG_NAME:
      return isSetMsgName();
    case RPC_ID:
      return isSetRpcId();
    case RELAY_STATE:
      return isSetRelayState();
    case URL:
      return isSetUrl();
    case COME_FROM:
      return isSetComeFrom();
    case TO:
      return isSetTo();
    case RESULT_CODE:
      return isSetResultCode();
    case AP_ID:
      return isSetApId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Header)
      return this.equals((Header)that);
    return false;
  }

  public boolean equals(Header that) {
    if (that == null)
      return false;

    boolean this_present_protocol = true && this.isSetProtocol();
    boolean that_present_protocol = true && that.isSetProtocol();
    if (this_present_protocol || that_present_protocol) {
      if (!(this_present_protocol && that_present_protocol))
        return false;
      if (!this.protocol.equals(that.protocol))
        return false;
    }

    boolean this_present_tid = true && this.isSetTid();
    boolean that_present_tid = true && that.isSetTid();
    if (this_present_tid || that_present_tid) {
      if (!(this_present_tid && that_present_tid))
        return false;
      if (!this.tid.equals(that.tid))
        return false;
    }

    boolean this_present_msgType = true;
    boolean that_present_msgType = true;
    if (this_present_msgType || that_present_msgType) {
      if (!(this_present_msgType && that_present_msgType))
        return false;
      if (this.msgType != that.msgType)
        return false;
    }

    boolean this_present_invokeMode = true && this.isSetInvokeMode();
    boolean that_present_invokeMode = true && that.isSetInvokeMode();
    if (this_present_invokeMode || that_present_invokeMode) {
      if (!(this_present_invokeMode && that_present_invokeMode))
        return false;
      if (this.invokeMode != that.invokeMode)
        return false;
    }

    boolean this_present_connectionId = true && this.isSetConnectionId();
    boolean that_present_connectionId = true && that.isSetConnectionId();
    if (this_present_connectionId || that_present_connectionId) {
      if (!(this_present_connectionId && that_present_connectionId))
        return false;
      if (!this.connectionId.equals(that.connectionId))
        return false;
    }

    boolean this_present_msgName = true && this.isSetMsgName();
    boolean that_present_msgName = true && that.isSetMsgName();
    if (this_present_msgName || that_present_msgName) {
      if (!(this_present_msgName && that_present_msgName))
        return false;
      if (!this.msgName.equals(that.msgName))
        return false;
    }

    boolean this_present_rpcId = true && this.isSetRpcId();
    boolean that_present_rpcId = true && that.isSetRpcId();
    if (this_present_rpcId || that_present_rpcId) {
      if (!(this_present_rpcId && that_present_rpcId))
        return false;
      if (!this.rpcId.equals(that.rpcId))
        return false;
    }

    boolean this_present_relayState = true && this.isSetRelayState();
    boolean that_present_relayState = true && that.isSetRelayState();
    if (this_present_relayState || that_present_relayState) {
      if (!(this_present_relayState && that_present_relayState))
        return false;
      if (!this.relayState.equals(that.relayState))
        return false;
    }

    boolean this_present_url = true && this.isSetUrl();
    boolean that_present_url = true && that.isSetUrl();
    if (this_present_url || that_present_url) {
      if (!(this_present_url && that_present_url))
        return false;
      if (!this.url.equals(that.url))
        return false;
    }

    boolean this_present_comeFrom = true && this.isSetComeFrom();
    boolean that_present_comeFrom = true && that.isSetComeFrom();
    if (this_present_comeFrom || that_present_comeFrom) {
      if (!(this_present_comeFrom && that_present_comeFrom))
        return false;
      if (!this.comeFrom.equals(that.comeFrom))
        return false;
    }

    boolean this_present_to = true && this.isSetTo();
    boolean that_present_to = true && that.isSetTo();
    if (this_present_to || that_present_to) {
      if (!(this_present_to && that_present_to))
        return false;
      if (!this.to.equals(that.to))
        return false;
    }

    boolean this_present_resultCode = true && this.isSetResultCode();
    boolean that_present_resultCode = true && that.isSetResultCode();
    if (this_present_resultCode || that_present_resultCode) {
      if (!(this_present_resultCode && that_present_resultCode))
        return false;
      if (this.resultCode != that.resultCode)
        return false;
    }

    boolean this_present_apId = true && this.isSetApId();
    boolean that_present_apId = true && that.isSetApId();
    if (this_present_apId || that_present_apId) {
      if (!(this_present_apId && that_present_apId))
        return false;
      if (!this.apId.equals(that.apId))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_protocol = true && (isSetProtocol());
    list.add(present_protocol);
    if (present_protocol)
      list.add(protocol);

    boolean present_tid = true && (isSetTid());
    list.add(present_tid);
    if (present_tid)
      list.add(tid);

    boolean present_msgType = true;
    list.add(present_msgType);
    if (present_msgType)
      list.add(msgType);

    boolean present_invokeMode = true && (isSetInvokeMode());
    list.add(present_invokeMode);
    if (present_invokeMode)
      list.add(invokeMode);

    boolean present_connectionId = true && (isSetConnectionId());
    list.add(present_connectionId);
    if (present_connectionId)
      list.add(connectionId);

    boolean present_msgName = true && (isSetMsgName());
    list.add(present_msgName);
    if (present_msgName)
      list.add(msgName);

    boolean present_rpcId = true && (isSetRpcId());
    list.add(present_rpcId);
    if (present_rpcId)
      list.add(rpcId);

    boolean present_relayState = true && (isSetRelayState());
    list.add(present_relayState);
    if (present_relayState)
      list.add(relayState);

    boolean present_url = true && (isSetUrl());
    list.add(present_url);
    if (present_url)
      list.add(url);

    boolean present_comeFrom = true && (isSetComeFrom());
    list.add(present_comeFrom);
    if (present_comeFrom)
      list.add(comeFrom);

    boolean present_to = true && (isSetTo());
    list.add(present_to);
    if (present_to)
      list.add(to);

    boolean present_resultCode = true && (isSetResultCode());
    list.add(present_resultCode);
    if (present_resultCode)
      list.add(resultCode);

    boolean present_apId = true && (isSetApId());
    list.add(present_apId);
    if (present_apId)
      list.add(apId);

    return list.hashCode();
  }

  @Override
  public int compareTo(Header other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetProtocol()).compareTo(other.isSetProtocol());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProtocol()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.protocol, other.protocol);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTid()).compareTo(other.isSetTid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tid, other.tid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMsgType()).compareTo(other.isSetMsgType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMsgType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.msgType, other.msgType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInvokeMode()).compareTo(other.isSetInvokeMode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInvokeMode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.invokeMode, other.invokeMode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetConnectionId()).compareTo(other.isSetConnectionId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConnectionId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.connectionId, other.connectionId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMsgName()).compareTo(other.isSetMsgName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMsgName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.msgName, other.msgName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRpcId()).compareTo(other.isSetRpcId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRpcId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rpcId, other.rpcId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRelayState()).compareTo(other.isSetRelayState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRelayState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.relayState, other.relayState);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUrl()).compareTo(other.isSetUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.url, other.url);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetComeFrom()).compareTo(other.isSetComeFrom());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetComeFrom()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.comeFrom, other.comeFrom);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTo()).compareTo(other.isSetTo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.to, other.to);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetResultCode()).compareTo(other.isSetResultCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResultCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resultCode, other.resultCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetApId()).compareTo(other.isSetApId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetApId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.apId, other.apId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Header(");
    boolean first = true;

    sb.append("protocol:");
    if (this.protocol == null) {
      sb.append("null");
    } else {
      sb.append(this.protocol);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("tid:");
    if (this.tid == null) {
      sb.append("null");
    } else {
      sb.append(this.tid);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("msgType:");
    sb.append(this.msgType);
    first = false;
    if (isSetInvokeMode()) {
      if (!first) sb.append(", ");
      sb.append("invokeMode:");
      sb.append(this.invokeMode);
      first = false;
    }
    if (isSetConnectionId()) {
      if (!first) sb.append(", ");
      sb.append("connectionId:");
      if (this.connectionId == null) {
        sb.append("null");
      } else {
        sb.append(this.connectionId);
      }
      first = false;
    }
    if (isSetMsgName()) {
      if (!first) sb.append(", ");
      sb.append("msgName:");
      if (this.msgName == null) {
        sb.append("null");
      } else {
        sb.append(this.msgName);
      }
      first = false;
    }
    if (isSetRpcId()) {
      if (!first) sb.append(", ");
      sb.append("rpcId:");
      if (this.rpcId == null) {
        sb.append("null");
      } else {
        sb.append(this.rpcId);
      }
      first = false;
    }
    if (isSetRelayState()) {
      if (!first) sb.append(", ");
      sb.append("relayState:");
      if (this.relayState == null) {
        sb.append("null");
      } else {
        sb.append(this.relayState);
      }
      first = false;
    }
    if (isSetUrl()) {
      if (!first) sb.append(", ");
      sb.append("url:");
      if (this.url == null) {
        sb.append("null");
      } else {
        sb.append(this.url);
      }
      first = false;
    }
    if (isSetComeFrom()) {
      if (!first) sb.append(", ");
      sb.append("comeFrom:");
      if (this.comeFrom == null) {
        sb.append("null");
      } else {
        sb.append(this.comeFrom);
      }
      first = false;
    }
    if (isSetTo()) {
      if (!first) sb.append(", ");
      sb.append("to:");
      if (this.to == null) {
        sb.append("null");
      } else {
        sb.append(this.to);
      }
      first = false;
    }
    if (isSetResultCode()) {
      if (!first) sb.append(", ");
      sb.append("resultCode:");
      sb.append(this.resultCode);
      first = false;
    }
    if (isSetApId()) {
      if (!first) sb.append(", ");
      sb.append("apId:");
      if (this.apId == null) {
        sb.append("null");
      } else {
        sb.append(this.apId);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (protocol == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'protocol' was not present! Struct: " + toString());
    }
    if (tid == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'tid' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'msgType' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class HeaderStandardSchemeFactory implements SchemeFactory {
    public HeaderStandardScheme getScheme() {
      return new HeaderStandardScheme();
    }
  }

  private static class HeaderStandardScheme extends StandardScheme<Header> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Header struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PROTOCOL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.protocol = iprot.readString();
              struct.setProtocolIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tid = iprot.readString();
              struct.setTidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MSG_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.msgType = iprot.readI32();
              struct.setMsgTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // INVOKE_MODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.invokeMode = iprot.readI32();
              struct.setInvokeModeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CONNECTION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.connectionId = iprot.readString();
              struct.setConnectionIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // MSG_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.msgName = iprot.readString();
              struct.setMsgNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // RPC_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.rpcId = iprot.readString();
              struct.setRpcIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // RELAY_STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.relayState = iprot.readString();
              struct.setRelayStateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.url = iprot.readString();
              struct.setUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // COME_FROM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.comeFrom = iprot.readString();
              struct.setComeFromIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // TO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.to = iprot.readString();
              struct.setToIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // RESULT_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.resultCode = iprot.readI32();
              struct.setResultCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // AP_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.apId = iprot.readString();
              struct.setApIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetMsgType()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'msgType' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Header struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.protocol != null) {
        oprot.writeFieldBegin(PROTOCOL_FIELD_DESC);
        oprot.writeString(struct.protocol);
        oprot.writeFieldEnd();
      }
      if (struct.tid != null) {
        oprot.writeFieldBegin(TID_FIELD_DESC);
        oprot.writeString(struct.tid);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(MSG_TYPE_FIELD_DESC);
      oprot.writeI32(struct.msgType);
      oprot.writeFieldEnd();
      if (struct.isSetInvokeMode()) {
        oprot.writeFieldBegin(INVOKE_MODE_FIELD_DESC);
        oprot.writeI32(struct.invokeMode);
        oprot.writeFieldEnd();
      }
      if (struct.connectionId != null) {
        if (struct.isSetConnectionId()) {
          oprot.writeFieldBegin(CONNECTION_ID_FIELD_DESC);
          oprot.writeString(struct.connectionId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.msgName != null) {
        if (struct.isSetMsgName()) {
          oprot.writeFieldBegin(MSG_NAME_FIELD_DESC);
          oprot.writeString(struct.msgName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.rpcId != null) {
        if (struct.isSetRpcId()) {
          oprot.writeFieldBegin(RPC_ID_FIELD_DESC);
          oprot.writeString(struct.rpcId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.relayState != null) {
        if (struct.isSetRelayState()) {
          oprot.writeFieldBegin(RELAY_STATE_FIELD_DESC);
          oprot.writeString(struct.relayState);
          oprot.writeFieldEnd();
        }
      }
      if (struct.url != null) {
        if (struct.isSetUrl()) {
          oprot.writeFieldBegin(URL_FIELD_DESC);
          oprot.writeString(struct.url);
          oprot.writeFieldEnd();
        }
      }
      if (struct.comeFrom != null) {
        if (struct.isSetComeFrom()) {
          oprot.writeFieldBegin(COME_FROM_FIELD_DESC);
          oprot.writeString(struct.comeFrom);
          oprot.writeFieldEnd();
        }
      }
      if (struct.to != null) {
        if (struct.isSetTo()) {
          oprot.writeFieldBegin(TO_FIELD_DESC);
          oprot.writeString(struct.to);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetResultCode()) {
        oprot.writeFieldBegin(RESULT_CODE_FIELD_DESC);
        oprot.writeI32(struct.resultCode);
        oprot.writeFieldEnd();
      }
      if (struct.apId != null) {
        if (struct.isSetApId()) {
          oprot.writeFieldBegin(AP_ID_FIELD_DESC);
          oprot.writeString(struct.apId);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class HeaderTupleSchemeFactory implements SchemeFactory {
    public HeaderTupleScheme getScheme() {
      return new HeaderTupleScheme();
    }
  }

  private static class HeaderTupleScheme extends TupleScheme<Header> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Header struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.protocol);
      oprot.writeString(struct.tid);
      oprot.writeI32(struct.msgType);
      BitSet optionals = new BitSet();
      if (struct.isSetInvokeMode()) {
        optionals.set(0);
      }
      if (struct.isSetConnectionId()) {
        optionals.set(1);
      }
      if (struct.isSetMsgName()) {
        optionals.set(2);
      }
      if (struct.isSetRpcId()) {
        optionals.set(3);
      }
      if (struct.isSetRelayState()) {
        optionals.set(4);
      }
      if (struct.isSetUrl()) {
        optionals.set(5);
      }
      if (struct.isSetComeFrom()) {
        optionals.set(6);
      }
      if (struct.isSetTo()) {
        optionals.set(7);
      }
      if (struct.isSetResultCode()) {
        optionals.set(8);
      }
      if (struct.isSetApId()) {
        optionals.set(9);
      }
      oprot.writeBitSet(optionals, 10);
      if (struct.isSetInvokeMode()) {
        oprot.writeI32(struct.invokeMode);
      }
      if (struct.isSetConnectionId()) {
        oprot.writeString(struct.connectionId);
      }
      if (struct.isSetMsgName()) {
        oprot.writeString(struct.msgName);
      }
      if (struct.isSetRpcId()) {
        oprot.writeString(struct.rpcId);
      }
      if (struct.isSetRelayState()) {
        oprot.writeString(struct.relayState);
      }
      if (struct.isSetUrl()) {
        oprot.writeString(struct.url);
      }
      if (struct.isSetComeFrom()) {
        oprot.writeString(struct.comeFrom);
      }
      if (struct.isSetTo()) {
        oprot.writeString(struct.to);
      }
      if (struct.isSetResultCode()) {
        oprot.writeI32(struct.resultCode);
      }
      if (struct.isSetApId()) {
        oprot.writeString(struct.apId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Header struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.protocol = iprot.readString();
      struct.setProtocolIsSet(true);
      struct.tid = iprot.readString();
      struct.setTidIsSet(true);
      struct.msgType = iprot.readI32();
      struct.setMsgTypeIsSet(true);
      BitSet incoming = iprot.readBitSet(10);
      if (incoming.get(0)) {
        struct.invokeMode = iprot.readI32();
        struct.setInvokeModeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.connectionId = iprot.readString();
        struct.setConnectionIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.msgName = iprot.readString();
        struct.setMsgNameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.rpcId = iprot.readString();
        struct.setRpcIdIsSet(true);
      }
      if (incoming.get(4)) {
        struct.relayState = iprot.readString();
        struct.setRelayStateIsSet(true);
      }
      if (incoming.get(5)) {
        struct.url = iprot.readString();
        struct.setUrlIsSet(true);
      }
      if (incoming.get(6)) {
        struct.comeFrom = iprot.readString();
        struct.setComeFromIsSet(true);
      }
      if (incoming.get(7)) {
        struct.to = iprot.readString();
        struct.setToIsSet(true);
      }
      if (incoming.get(8)) {
        struct.resultCode = iprot.readI32();
        struct.setResultCodeIsSet(true);
      }
      if (incoming.get(9)) {
        struct.apId = iprot.readString();
        struct.setApIdIsSet(true);
      }
    }
  }

}

